// inline assembly outside functions
asm("
    CALL (LB) _main   ; call to the entry point of the program
    HALT              ; stop the machine
")

// inline assembly in a function
int * malloc(int size) {
    asm("
        LOAD %size      ; access parameter size
        SUBR Malloc     ; allocation
        RETURN (1) 1
    ")
}

// inline assembly in a function
void log(char *message, int value) {
    int x = 12;
    asm("
        LOAD %message        ; access the first parameter
        SUBR Sout            ; print message
        LOAD %value          ; access the second parameter
        LOADL 1
        SUBR IAdd
        STORE %x             ; write value+1 into x
        LOAD %x              ; access variable x
        SUBR IOUT            ; print x
        SUBR LN
        RETURN (2) 0
    ")
}

// function showing pointer manipulation
int foo(int n) {
    // declare without initialising
    int xxx;
    xxx = 100;

    // declare and initialize
    int a = n + 999;

    // declare a pointer
    int *m = malloc(1);
    a = *m + 666;

    // declare a pointer of pointer
    int ** k = malloc(2);
    *k = m;
    ** k = 12;
    int b = **k + 9999;

    // cast
    m = (int *)malloc(10);
    return m;
}

// function returning a pointer
int * ref(int x) {
    int *p = malloc(x);
    return p;
}

// function showing arithmetic expressions
int bar(int a, int b) {
    int u = 301;
    int v = 401;
    int result;

    result = foo(33*a - b > (-55*u/22%11/v));

    return result;
}

// entry point of the program
int main() {
    log("Hello, world ! ", bar(98, 99));
    char c = 'a';
    int y = 999;

    // conditional instruction
    if (y == 0) {
        log("then", y);
    }
    else {
        log("else", y);
    }

    return y;
}
