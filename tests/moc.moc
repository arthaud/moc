// inline assembly outside functions
asm("
    CALL (LB) _main   ; call to the entry point of the program
    HALT              ; stop the machine
")

// inline assembly inside a function
int * malloc(int size) {
    asm("
        LOAD %size      ; access parameter size
        SUBR Malloc     ; allocation
        RETURN (1) 1
    ");
}

// inline assembly inside a function
void log(char *message, int value) {
    int x = 12;
    asm("
        LOAD %message        ; access the first parameter
        SUBR Sout
        LOAD %value          ; access the second parameter
        LOAD %x              ; access variable x
        SUBR IAdd
        SUBR IOUT
        SUBR LN
        RETURN (2) 0
    ");
}

// one class to rule them all
@class NSObject {
}
+(void)init {}
@end

// a point
@class Point2D : NSObject {
    int x;
    int y;
}
-(int)x {
    return x;
}
-(int)y {
    return y;
}
-(void)x:(int)a y:(int)b {
    x = a;
    y = b;
}
@end

// a colored point
@class Point2DCol:Point2D {
    int col;
}
-(int) colx {
    return col;
}
-(void) x:(int)a y:(int)b col:(int)c {
    int z = [self colx];
    [self x:a y:b];
    col = 99;
}
@end

int main() {
    log(@"Hello, GEO!");
    char c = 'a';
    Point2DCol *org = [Point2DCol alloc];
    id object = org;
    [org x:0 y:0 col:4];
    Point2D ** pp = nil;
    org = [[Point2DCol alloc] init];
    log(@"PointColore = ", [org x], [org y], [org col]);
    int y = 999;
    log(@"y = 36 = %d", y);
    return y;
}
