option version = 1.0.1;
option k = 2;
option auto = true;

syn asm_code : STRING for TAM, INST, CINST, ADR, INSTS, CST;
inh asm_st : ST for TAM, INST, INSTS, ADR, CST;

space  separ  is "[\t ]+" ;
sugar  osbra  is "\[" ;
sugar  csbra  is "\]" ;
sugar  opar   is "\(" ;
sugar  cpar   is "\)" ;
sugar  ocbra  is "\{" ;
sugar  ccbra  is "\}" ;
sugar  load   is "LOAD" ;
sugar  loada  is "LOADA" ;
sugar  loadi  is "LOADI" ;
sugar  loadl  is "LOADL" ;
sugar  store  is "STORE" ;
sugar  storei is "STOREI" ;
sugar  call   is "CALL" ;
sugar  calli  is "CALLI" ;
sugar  return is "RETURN" ;
sugar  subr   is "SUBR" ;
sugar  push   is "PUSH" ;
sugar  pop    is "POP" ;
sugar  jump   is "JUMP" ;
sugar  jumpi  is "JUMPI" ;
sugar  jumpif is "JUMPIF" ;
sugar  halt   is "HALT" ;
sugar  nl     is "(\n|\r)" ;
term   string is "\"([^\"]|\\.)*\"" ;
term   char   is "\'([^\']|\\.)\'" ;
term   nb     is "\-?[0-9]+" ;
term   var    is "%[A-Za-z][A-Za-z0-9_]*" ; -- a MOC variable
term   ident  is "[0-9a-zA-Z_\$@#\.\?\<\>]+" ;
term   info   is "\;[^\n\r]*" ;

TAM -> ocbra INSTS ccbra #gen ;
#gen {
    TAM^asm_code = "; inline assembly\n" + INSTS^asm_code;
}

INSTS -> INST INSTS #gen ;
#gen {
    INSTS^asm_code = INST^asm_code + "\n" + INSTS1^asm_code;
}

INSTS -> #gen ;
#gen {
    INSTS^asm_code = "";
}

ADR -> opar nb cpar nb osbra ident csbra #gen ;
#gen {
    ADR^asm_code = "(" + nb^txt + ") " + nb1^txt + '[' + ident^txt+ ']';
}

ADR -> var #gen ;
#gen {
    -- replace var^txt by the location of the variable
    if (ADR^asm_st == null) {
        -- write "no Symbols Table\n"
    }
    else {
        INFO i = ADR^asm_st.globalSearch(var^txt.substring(1));
        if (i != null) {
            match (i) {
                case INFOVAR {
                    INFOVAR v = i;
                    Location l = v.getLocation();
                    ADR^asm_code = "(";
                }
                default {
                    error(NOT_A_VAR, var^txt);
                }
            }
        }
        else {
            error(UNKNOWN, var^txt);
        }
    }
}

INST -> nl #gen ;
#gen {
    INST^asm_code = "\n";
}

INST -> info nl #gen ;
#gen {
    INST^asm_code = "\t" + info^txt + "\n";
}

INST -> load ADR #gen ;
#gen {
    INST^asm_code = "\tLOAD " + ADR^asm_code;
}

INST -> loada CINST #gen ;
#gen {
    INST^asm_code = "\tLOADA " + CINST^asm_code;
}

INST -> loadi opar nb cpar #gen ;
#gen {
    INST^asm_code = "\tLOADI (" + nb^txt + ")";
}

INST -> loadl CST #gen ;
#gen {
    INST^asm_code = "\tLOADL " + CST^asm_code;
}

CST -> nb #gen ;
#gen {
    CST^asm_code = nb^txt;
}

CST -> string #gen ;
#gen {
    CST^asm_code = string^txt;
}

CST -> char #gen ;
#gen {
    CST^asm_code = char^txt;
}


INST -> store ADR #gen ;
#gen {
    INST^asm_code = "\tSTORE " + ADR^asm_code;
}

INST -> storei opar nb cpar #gen ;
#gen {
    INST^asm_code = "\tSTOREI (" + nb^txt + ")";
}

INST -> call opar ident cpar CINST #gen ;
#gen {
    INST^asm_code = "\tCALL (" + ident^txt + ") " + CINST^asm_code;
}

INST -> calli #gen ;
#gen {
    INST^asm_code = "\tCALLI";
}

INST -> return opar nb cpar nb #gen ;
#gen {
    INST^asm_code = "\tRETURN (" + nb^txt + ") " + nb1^txt;
}

INST -> subr ident #gen ;
#gen {
    INST^asm_code = "\tSUBR " + ident^txt;
}

INST -> ident #gen ;
#gen {
    INST^asm_code = ident^txt;
}

INST -> push nb #gen ;
#gen {
    INST^asm_code = "\tPUSH " + nb^txt;
}

INST -> pop opar nb cpar nb #gen ;
#gen {
    INST^asm_code = "\tPOP (" + nb^txt + ") " + nb1^txt;
}

INST -> jump CINST #gen ;
#gen {
    INST^asm_code = "\tJUMP " + CINST^asm_code;
}

INST -> jumpi #gen ;
#gen {
    INST^asm_code = "\tJUMPI";
}

INST -> jumpif opar nb cpar CINST #gen ;
#gen {
    INST^asm_code = "\tJUMPIF (" + nb^txt +") " + CINST^asm_code;
}

INST -> halt #gen ;
#gen {
    INST^asm_code = "\tHALT";
}

CINST -> nb osbra ident csbra #gen ;
#gen {
    CINST^asm_code = nb^txt + '[' + ident^txt+ ']';
}

CINST -> ident #gen ;
#gen {
    CINST^asm_code = ident^txt;
}
