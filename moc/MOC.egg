----------------------------------------------------------------------------
-- Grammaires de MC et MOC                                                --
-- La grammaire de MOC est obtenue en décommentant les parties indiquées. --
----------------------------------------------------------------------------

option auto = true;
option version = 0.0.1;
option k = 2;

inh source : MOCSourceFile for PROGRAMME;
inh machine : IMachine for
         ENTITES, FONCTION, INST, BLOC, INSTS, SIX,
         PARFS, PARF, PARFSX, ARGS,ARGSX,
         E, AFFX, A, AX, R, RX, T, TX, F
--       -- décommenter la ligne suivante pour MOC
--       ,IMPLEMENTATION, METHODES, METHODE, ATTRIBUTS, MPARF, MPARFS,MARG, MARGS
         ;

-- ces attributs permettent de récupérer les instructions du code ASM inline
syn code_asm : STRING for ASM;
-- la table des symboles courante
inh tds_asm : TDS for ASM;

space separateur is  "[\r\n\t ]+" ;
space comm       is  "\/\/[^\n]*\n" ;
sugar paro       is  "\(" ;
sugar parf       is  "\)" ;
sugar aco        is  "\{" ;
sugar acf        is  "\}" ;
sugar virg       is  "," ;
sugar pv         is  "\;" ;
sugar affect     is  "=" ;
sugar si         is  "if" ;
sugar sinon      is  "else" ;
sugar void       is  "void" ;
sugar asm        is  "asm" ;
sugar int        is  "int" ;
sugar char       is  "char" ;
sugar retour     is  "return" ;
sugar null       is  "NULL" ;
sugar nil        is  "nil" ;
sugar inf        is  "\<" ;
sugar infeg      is  "\<=" ;
sugar sup        is  "\>" ;
sugar supeg      is  "\>=" ;
sugar eg         is  "==" ;
sugar neg        is  "\!=" ;
sugar plus       is  "\+" ;
sugar moins      is  "\-" ;
sugar ou         is  "\|\|" ;
sugar mult       is  "\*" ;
sugar div        is  "\/" ;
sugar mod        is  "\%" ;
sugar et         is  "\&\&" ;
sugar non        is  "\!" ;

---- décommenter pour MOC
--sugar dpts       is  "\:" ;
--sugar cro        is  "\[" ;
--sugar crf        is  "\]" ;
--sugar id         is  "id" ;
--sugar classe     is  "@class" ;
--sugar fin        is  "@end" ;
--sugar self       is "self" ;
--sugar bool       is  "BOOL" ;
--sugar super      is "super" ;
--sugar yes        is "YES" ;
--sugar no         is "NO" ;

term entier      is  "[0-9]+" ;
term caractere   is  "\'[^\']\'" ;
term chaine      is  "\"[^\"]*\"" ;
term ident       is  "[a-z][_0-9A-Za-z]*" ;
---- décommenter pour MOC
--term identc      is  "[A-Z][_0-9A-Za-z]*" ; -- nom de classe
--term chaineo     is  "@\"[^\"]*\"" ; -- chaine MOC

-- pour les instructions en assembleur 'inline'
compil ASM;


PROGRAMME -> #init ENTITES #gen ;
global IMachine machine;

-- transmission de la machine cible (choisie par l'option -m au lancement)
#init {
    machine = PROGRAMME^source.getMachine();

    if (machine == null) {
        error(NO_MACH, PROGRAMME^source.getMachName());
    }
    else {
        ENTITES^machine = machine;
    }
}

#gen {
    -- écrit le code dans un fichier
    machine.writeCode(PROGRAMME^source.getFileName(), "; no code\n");
}

ENTITES -> ;
ENTITES -> asm #tds ASM ENTITES #gen ;
#tds {
    -- Remplacer 'null' par la table courante pour que
    -- le code ASM puisse accéder aux variables de MC ou MOC
    ASM^tds_asm = null;
}

#gen {
    -- ASM^code_asm contient le code ASM inline;
}

ENTITES -> FONCTION ENTITES ;

-- fonctions
FONCTION -> TYPE ident paro PARFS parf BLOC ;

-- paramètres de fonctions
PARFS -> ;
PARFS -> PARF PARFSX ;
PARFSX -> ;
PARFSX -> virg PARF PARFSX ;
PARF -> TYPE ident ;

-- les types (de base et pointeurs)
TYPE -> STYPE REFS ;
REFS -> ;
REFS -> mult REFS ;

-- types de base
STYPE-> void ;
STYPE-> int ;
STYPE-> char ;

-- corps de méthode et bloc d'instructions
BLOC -> aco INSTS acf ;

-- instructions
INSTS -> ;
INSTS -> INST INSTS ;

-- déclaration de variable locale avec ou sans init
INST -> TYPE ident AFFX pv ;

-- instruction expression (affectation et appel de procédure)
INST -> E pv ;

-- bloc d'instructions
INST -> BLOC ;

-- conditionnelle
INST -> si paro E parf BLOC SIX ;
SIX -> sinon BLOC ;
SIX -> ;

-- retour de fonction
INST -> retour E pv ;
-- inline asm
INST -> asm #tds ASM #gen ;
#tds {
    -- À remplacer par la table courante pour que
    -- l'assembleur puisse accéder aux variables
    ASM^tds_asm = null;
}

#gen {
    -- ASM^code_asm contient le code assembleur inline
    -- dans lequel les noms de variables ont été remplacés
    -- par leurs adresses.
}

-- les expressions
-----------------------------------------------------------------------
-- E = expression (y compris l'affectation)
-- A = expression figurant dans une affectation
-- R = expression figurant dans une expression relationnelle
-- T = expression figurant dans une expression additive (TERME)
-- F = expression figurant dans une expression multiplicative (FACTEUR)
-----------------------------------------------------------------------

E -> A AFFX ;

-- affectation
AFFX -> affect A ;
AFFX -> ;

-- relation
A -> R AX ;
AX -> OPREL R ;
AX -> ;

-- opérateurs relationnels
OPREL -> inf ;
OPREL -> sup ;
OPREL -> infeg ;
OPREL -> supeg ;
OPREL -> eg ;
OPREL -> neg ;

-- additions ...
R -> T RX ;
RX -> OPADD T RX ;
RX -> ;

-- opérateurs additifs
OPADD -> plus ;
OPADD -> moins ;
OPADD -> ou ;

-- multiplication, ...
T -> F TX ;
TX -> OPMUL F TX ;
TX -> ;

-- opérateurs multiplicatifs
OPMUL -> mult ;
OPMUL -> div ;
OPMUL -> mod ;
OPMUL -> et ;

-- expressions de base

-- Constante entière
F -> entier ;
-- Constante chaine
F -> chaine ;
-- Constante caractère
F -> caractere ;
-- expression unaire
F -> OPUN F ;

-- opérateurs unaires
OPUN -> plus ;
OPUN -> moins ;
OPUN -> non ;

-- pointeur NULL
F -> null ;

-- expression parenthésée
F -> paro E parf ;
F -> paro TYPE parf F ;

-- appel de sous-programme
F -> ident paro ARGS parf ;
F -> ident ;

---- accès zone pointée
F -> mult F ;

-- arguments appel de sous-programme
ARGS -> ;
ARGS -> E ARGSX ;
ARGSX -> ;
ARGSX -> virg E ARGSX ;

----============ MOC extension =================
--ENTITES -> IMPLEMENTATION ENTITES ;
---- définition d'une classe
--IMPLEMENTATION -> classe identc SUPER aco ATTRIBUTS acf METHODES fin ;
---- surclasse
--SUPER -> ;
--SUPER -> dpts identc ;
---- attributs
--ATTRIBUTS -> ;
--ATTRIBUTS -> TYPE ident pv ATTRIBUTS ;
---- méthodes
--METHODES -> ;
--METHODES -> METHODE METHODES ;
--METHODE -> QUAL PTYPE MPARFS BLOC ;
---- qualificateur attribut ou méthode: + = de classe, - = d'instance
--QUAL -> plus ;
--QUAL -> moins ;
---- type classe
--STYPE-> identc ;
---- type BOOL
--STYPE-> bool ;
---- type "any"
--TYPE -> id ;
---- type argument (ou retour) de méthode entre parenthèses
--PTYPE-> paro TYPE parf ;
---- paramètres de méthodes
--MPARFS -> ;
--MPARFS -> MPARF MPARFS ;
---- sélecteur sans paramètre
--MPARF -> ident ;
---- sélecteur + type paramètre + nom paramètre
--MPARF -> ident dpts PTYPE ident ;
---- object nil
--F -> nil ;
---- Constante 'YES'
--F -> yes ;
---- Constante 'NO'
--F -> no ;
---- chaîne MOC (commence par @)
--F -> chaineo ;
--F -> self ;
--F -> super ;
---- Appel de méthode
--F -> cro F MARGS crf ;
---- pour appel méthode de classe
--F -> cro identc MARGS crf ;
---- arguments appel de méthode
--MARGS -> ;
--MARGS -> MARG MARGS ;
---- sélecteur + arg
--MARG -> ident dpts E ;
---- sélecteur sans arg
--MARG -> ident ;
